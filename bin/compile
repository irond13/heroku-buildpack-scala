#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

###### Yeoman Setup START #####

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
# parse and derive params
UI_FILES="ui"
BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
BIN_DIR=$BP_DIR/bin
OPT_DIR=$BP_DIR/opt
. $BIN_DIR/common

# parse args
BUILD_DIR=$(cd $1; pwd)
CACHE_DIR=$2

ui_build_dir="$1/$UI_FILES"
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

printStructure

trap cat_npm_debug_log EXIT
echo "jq_check $bp_dir"

# Look in package.json's engines.node field for a semver range
semver_range=$(cat $ui_build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)

echo "Got semver $semver_range"

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)
#node_version="0.10.28"

echo "Checking node versions"

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

status "Using node $node_version"

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $ui_build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $ui_build_dir/vendor
mv $ui_build_dir/node-v$node_version-linux-x64 $ui_build_dir/vendor/node
chmod +x $ui_build_dir/vendor/node/bin/*
PATH=$ui_build_dir/vendor/node/bin:$PATH

# Run subsequent node/npm commands from the build path
cd $ui_build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $ui_build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $cache_dir/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $ui_build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

fi

# Scope config var availability only to `npm install`
(
  if [ -d "$env_dir" ]; then
    status "Exporting config vars to environment"
    export_env_dir $env_dir
  fi
  
  cd $ui_build_dir

  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $ui_build_dir/.npmrc --production 2>&1 | indent
  status "Installing yo"
  npm install -g yo
  status "Installing grunt"
  npm install -g grunt
  echo "Installed grunt"
  #ls -la $ui_build_dir/vendor/node/lib/node_modules/grunt

  status "Installing grunt-cli"
  
  npm install -g grunt-cli
  echo "Installed grunt-cli"
  ls -la $ui_build_dir/vendor/node/lib/node_modules/grunt-cli
  ls -la $ui_build_dir/vendor/node/lib/node_modules/grunt-cli/bin
  status "Installing bower"
  npm install -g bower
)

exit 1

echo "Path $PATH"
ls -la $ui_build_dir/vendor/node/bin

# Persist goodies like node-version in the slug
mkdir -p $ui_build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $ui_build_dir/.heroku/node-version

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if test -d $ui_build_dir/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $ui_build_dir/node_modules $cache_dir/node
fi

# Copy goodies to the cache
cp -r $ui_build_dir/.heroku $cache_dir/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$ui_build_dir/.node-gyp"
rm -rf "$ui_build_dir/.npm"

# install compass
echo "-----> Installing compass"
# install compass
export GEM_HOME=$CACHE_DIR/ruby/.gem/ruby/1.9.1
PATH="$GEM_HOME/bin:$PATH"
if [ ! -f $GEM_HOME/bin/compass ]; then
  mkdir -p $CACHE_DIR/ruby
  HOME="$CACHE_DIR/ruby" gem install compass --user-install --no-rdoc --no-ri
fi

mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\"\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/nodejs.sh
echo "Dependencies installed" | indent

if [ -f $BUILD_DIR/$UI_FILES/bower.json ]; then
  # make sure that bower is installed locally

  echo "-----> Found bower.json, running bower install -g"
  bower install -g
else
  echo "-----> No Bower.json found"
fi

#if [ -f $BUILD_DIR/$UI_FILES/grunt.js ] || [ -f $BUILD_DIR/$UI_FILES/Gruntfile.js ] || [ -f $BUILD_DIR/$UI_FILES/Gruntfile.coffee ]; then
#  echo "-----> Found Gruntfile, running grunt task"
#  grunt
#  cd ..
#else
#  echo "-----> No Gruntfile (grunt.js, Gruntfile.js, Gruntfile.coffee) found"
#fi

echo "-----> Building runtime environment"

echo "export PATH=\"\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/nodejs.sh

###### Yeoman Setup END #####

###### SBT Setup START #####

cd $BUILD_DIR

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xzm
. bin/util
. bin/java

export_env_dir $ENV_DIR

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# create default system.properties
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.7" > ${BUILD_DIR}/system.properties
fi

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

# home directory from perspective of SBT; we rename
# it because otherwise the project root and $HOME
# are the same, and by default .sbt has a (different)
# meaning in those two places
SBT_USER_HOME=".sbt_home"
SBT_USER_HOME_ABSOLUTE="$BUILD_DIR/$SBT_USER_HOME"
# where we put the SBT binaries
SBT_BINDIR="$SBT_USER_HOME"/bin

# chdir as sbt expects
cd $BUILD_DIR

# unpack cache
CACHED_DIRS="$SBT_USER_HOME/.ivy2 $SBT_USER_HOME/boot $SBT_BINDIR target project/target project/boot"
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $CACHE_DIR $BUILD_DIR
done

# these are preliminary checks. actual version check happens below when attempting to download sbt boot.properties
if ! test -e project/build.properties; then
	echo " !      Error, your scala project must include project/build.properties and define sbt.version"
	echo " !      You must use a release verison of sbt, sbt.version=0.11.0 or greater"
        exit 1
fi

if ! has_supported_sbt_version ${BUILD_DIR}; then
	echo " !      Error, you have defined an unsupported sbt.version in project/build.properties"
	echo " !      You must use a release verison of sbt, sbt.version=0.11.0 or greater"
	exit 1
fi

SBT_VERSION="$(get_supported_sbt_version ${BUILD_DIR})"
SBT_JAR="sbt-launch.jar"
SBT_URL="http://typesafe.artifactoryonline.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.5/$SBT_JAR"
## in 0.10 start-script will depend on package, if packaging
## is required - it may not be, we can run .class files or a package-war
## instead.
SBT_TASKS="clean grunt compile stage"

# To enable clean compiles, configure the environment to clean:
# $ heroku config:set SBT_CLEAN=true
# $ git push heroku master
# See: https://devcenter.heroku.com/articles/scala-support#clean-builds
[ "$SBT_CLEAN" = "true" ] && SBT_TASKS="clean $SBT_TASKS"

if [ ! -d .ivy2/cache ]; then
   mkdir -p .ivy2/cache
fi

if [ ! -f "$SBT_BINDIR"/"$SBT_JAR" ]; then
  mkdir -p "$SBT_BINDIR"
  cd "$SBT_BINDIR"

  ## clean up any old versions
  /bin/rm -f sbt sbt-launch-*.jar || true

  echo -n "-----> Downloading SBT..."
  curl --silent --max-time 60 -O --location $SBT_URL --fail || error "Failed to download $SBT_JAR"
  echo "done"

  cd $BUILD_DIR
fi

# Install the custom sbt script for cmds like `heroku run sbt console`
cp -p $OPT_DIR/sbt-launcher.sh $SBT_BINDIR/sbt
chmod a+x $SBT_BINDIR/sbt

# download and cache the dependencies if this is the first build
if [ ! -d "$SBT_USER_HOME/.ivy2" ]; then
  if is_sbt_native_packager $BUILD_DIR || is_play $BUILD_DIR; then
    prime_ivy_cache "$BUILD_DIR" "$SBT_USER_HOME_ABSOLUTE" "$SBT_BINDIR/$SBT_JAR"
    run_sbt "$SBT_USER_HOME_ABSOLUTE" "$SBT_BINDIR/$SBT_JAR" "update"
    cache_copy $SBT_USER_HOME/.ivy2 $BUILD_DIR $CACHE_DIR
  fi
fi

# build app
run_sbt "$SBT_USER_HOME_ABSOLUTE" "$SBT_BINDIR/$SBT_JAR" "$SBT_TASKS"

PROFILE_PATH="$BUILD_DIR/.profile.d/scala.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH

# repack cache
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done

# drop useless directories from slug for play and sbt-native-launcher only
if is_sbt_native_packager $BUILD_DIR || is_play $BUILD_DIR; then
  if [ -d $SBT_USER_HOME/.ivy2 ]; then
    echo "-----> Dropping ivy cache from the slug"
    rm -rf $SBT_USER_HOME/.ivy2
  fi
  if [ -d $BUILD_DIR/project/boot ] ; then
    echo "-----> Dropping project boot dir from the slug"
    rm -rf $BUILD_DIR/project/boot
  fi
  if [ -d $BUILD_DIR/target ] ; then
    echo "-----> Dropping compilation artifacts from the slug"
    rm -rf $BUILD_DIR/target/scala-*
    rm -rf $BUILD_DIR/target/streams
    rm -rf $BUILD_DIR/target/resolution-cache
  fi
fi

###### SBT Setup END #####
